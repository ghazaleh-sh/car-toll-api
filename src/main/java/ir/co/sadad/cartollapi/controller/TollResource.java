package ir.co.sadad.cartollapi.controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import ir.co.sadad.cartollapi.dtos.*;
import ir.co.sadad.cartollapi.service.InquiryService;
import ir.co.sadad.cartollapi.service.NajiService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;

import static ir.co.sadad.cartollapi.service.util.Constants.SSN;

@Slf4j
@RequiredArgsConstructor
@RestController
@RequestMapping(value = "${v1API}/naji-api")
@Tag(description = "مستندات سرویس های خلافی خودرو", name = "Car Toll Resources")
public class TollResource {

    private final NajiService najiService;
    private final InquiryService inquiryService;

    /**
     * creates and inserts the carToll information into user, Plate, UserPlate tables
     *
     * @param ssn     generated by gateway
     * @param request a body includes plateTag, type, nationalCode and cellphone of plate owner (all mandatory)
     * @return response Code and message
     */
    @Operation(summary = "سرویس ثبت پلاک", description = "سرویس ثبت پلاک")
    @ApiResponse(responseCode = "200", content = @Content(schema = @Schema(implementation = PlateCreateResponseDto.class)))
    @PostMapping(value = "/plates")
    public ResponseEntity<PlateCreateResponseDto> plates(
            @RequestHeader(SSN) String ssn,
            @RequestBody
            @Valid PlateCreateRequestDto request
    ) {
        PlateCreateResponseDto response = najiService.create(request, ssn, request.getUserCellPhone());

        return new ResponseEntity<>(response, HttpStatus.OK);

    }

    @Operation(summary = "سرویس دریافت پلاک", description = "سرویس دریافت پلاک")
    @ApiResponse(responseCode = "200", content = @Content(schema = @Schema(implementation = PlateSearchResponseDto.class)))
    @GetMapping(value = "/plates")
    public ResponseEntity<PlateSearchResponseDto> getPlates(
            @RequestHeader(SSN) String ssn
    ) {
        PlateSearchResponseDto response = najiService.getPlates(ssn);

        return new ResponseEntity<>(response, HttpStatus.OK);

    }

    @Operation(summary = "سرویس حذف پلاک", description = "سرویس حذف پلاک")
    @ApiResponse(responseCode = "200", content = @Content(schema = @Schema(implementation = PlateDeleteResponseDto.class)))
    @DeleteMapping(value = "/plates/{id}")
    public ResponseEntity<PlateDeleteResponseDto> deletePlate(
            @RequestHeader(SSN) String ssn,
            @PathVariable("id") String plateNo
    ) {
        PlateDeleteResponseDto response = najiService.deletePlate(plateNo, ssn);
        return new ResponseEntity<>(response, HttpStatus.OK);

    }

    @Operation(summary = "سرویس ویرایش پلاک", description = "سرویس ویرایش پلاک")
    @ApiResponse(responseCode = "200", content = @Content(schema = @Schema(implementation = PlateUpdateResponseDto.class)))
    @PutMapping(value = "/plates")
    public ResponseEntity<PlateUpdateResponseDto> updatePlates(
            @RequestHeader(SSN) String ssn,
            @RequestBody
            @Valid PlateUpdateRequestDto request
    ) {
        PlateUpdateResponseDto response = najiService.updatePlate(request, ssn);
        return new ResponseEntity<>(response, HttpStatus.OK);

    }

    @Operation(summary = "سرویس استعلام تجمیعی", description = "سرویس استعلام تجمیعی")
    @ApiResponse(responseCode = "200", content = @Content(schema = @Schema(implementation = ViolationAggregationResponseDto.class)))
    @PostMapping(value = "/inquiry-aggregation")
    public ResponseEntity<ViolationAggregationResponseDto> inquiryNajiAggregation(
            @RequestHeader(name = HttpHeaders.AUTHORIZATION) String authToken,
            @RequestHeader(SSN) String ssn,
            @RequestBody
            @Valid ViolationRequestDto request
    ) {
        ViolationAggregationResponseDto response = inquiryService.getAggregationViolation(request, ssn, authToken);
        return new ResponseEntity<>(response, HttpStatus.OK);

    }

    @Operation(summary = "سرویس استعلام با جزیئات", description = "سرویس استعلام با جزییات")
    @ApiResponse(responseCode = "200", content = @Content(schema = @Schema(implementation = ViolationListResponseDto.class)))
    @PostMapping(value = "/inquiry-detail")
    public ResponseEntity<ViolationListResponseDto> inquiryNajiDetail(
            @RequestHeader(name = HttpHeaders.AUTHORIZATION) String authToken,
            @RequestHeader(SSN) String ssn,
            @RequestBody
            @Valid ViolationRequestDto request
    ) {
        ViolationListResponseDto violationList = inquiryService.getViolationList(request, ssn, authToken);
        return new ResponseEntity<>(violationList, HttpStatus.OK);

    }

    @Operation(summary = "سرویس دریافت عکس جریمه", description = "سرویس دریافت عکس استعلام")
    @ApiResponse(responseCode = "200", content = @Content(schema = @Schema(implementation = ViolationImageResponseDto.class)))
    @PostMapping(value = "/inquiry-image")
    public ResponseEntity<ViolationImageResponseDto> getViolationImage(
            @RequestHeader(SSN) String ssn,
            @RequestBody
            @Valid ViolationImageRequestDto request
    ) {
        ViolationImageResponseDto violationImage = inquiryService.getViolationImage(request, ssn);
        return new ResponseEntity<>(violationImage, HttpStatus.OK);

    }

    @Operation(summary = "سرویس دریافت تاریخچه استعلام", description = "سرویس تاریخچه استعلام")
    @ApiResponse(responseCode = "200", content = @Content(schema = @Schema(implementation = ViolationInquiryResponseDto.class)))
    @GetMapping(value = "/inquiry-result")
    public ResponseEntity<ViolationInquiryResponseDto> inquiryResult(
            @RequestHeader(SSN) String ssn
    ) {
        ViolationInquiryResponseDto response = najiService.getInquiryResults(ssn);
        return new ResponseEntity<>(response, HttpStatus.OK);

    }

    @Operation(summary = "سرویس درخواست احراز هویت", description = "سرویس درخواست هویت")
    @ApiResponse(responseCode = "200", content = @Content(schema = @Schema(implementation = OtpResponseDto.class)))
    @PostMapping(value = "/otp-request")
    public ResponseEntity<OtpResponseDto> otpRequest(
            @RequestHeader(name = HttpHeaders.AUTHORIZATION) String authToken,
            @RequestHeader(SSN) String ssn,
            @RequestBody
            @Valid OtpRequestDto otpReq
    )  {
        OtpResponseDto response = inquiryService.otpRequestService(otpReq, ssn,authToken);
        return new ResponseEntity<>(response, HttpStatus.OK);

    }

    @Operation(summary = "سرویس دریافت تاییدیه هویت", description = "سرویس دریافت تاییدیه هویت")
    @ApiResponse(responseCode = "200", content = @Content(schema = @Schema(implementation = OtpResponseDto.class)))
    @PostMapping(value = "/otp-verify")
    public ResponseEntity<OtpResponseDto> otpVerify(
            @RequestHeader(name = HttpHeaders.AUTHORIZATION) String authToken,
            @RequestHeader(SSN) String ssn,
            @RequestBody
            @Valid OtpVerifyRequestDto otpReq
    )  {
        OtpResponseDto response = inquiryService.otpVerifyService(otpReq, ssn,authToken );
        return new ResponseEntity<>(response, HttpStatus.OK);

    }

    @Operation(summary = "سرویس پرداخت کارمزد", description = "سرویس پرداخت کارمزد")
    @ApiResponse(responseCode = "200", content = @Content(schema = @Schema(implementation = WagePaymentResponseDto.class)))
    @PostMapping(value = "/wage-payment")
    public ResponseEntity<WagePaymentResponseDto> wagePayment(
            @RequestHeader(name = HttpHeaders.AUTHORIZATION) String authToken,
            @RequestHeader(SSN) String ssn,
            @RequestBody
            @Valid WagePaymentRequestDto request
    ) {
        WagePaymentResponseDto response = inquiryService.wagePayment(request, ssn, authToken);
        return new ResponseEntity<>(response, HttpStatus.OK);

    }

    @Operation(summary = "سرویس تاییدیه پرداخت کارمزد", description = "سرویس تاییدیه پرداخت کارمزد")
    @ApiResponse(responseCode = "200", content = @Content(schema = @Schema(implementation = WagePaymentResponseDto.class)))
    @PostMapping(value = "/wage-payment-tan")
    public ResponseEntity<WagePaymentResponseDto> wagePaymentTan(
            @RequestHeader(name = HttpHeaders.AUTHORIZATION) String authToken,
            @RequestHeader(SSN) String ssn,
            @RequestBody
            @Valid TanRequestDto request
    ) {

        WagePaymentResponseDto response = inquiryService.tanVerifyWagePayment(request, ssn, authToken);
        return new ResponseEntity<>(response, HttpStatus.OK);

    }

    @Operation(summary = "سرویس تغییر وضعیت پرداخت خلافی", description = "سرویس تغییر وضعیت خلافی پرداخت شده")
    @ApiResponse(responseCode = "200")
    @PostMapping(value = "/payment-status")
    public ResponseEntity<HttpStatus> changeInquiryStatus(
            @RequestHeader(name = HttpHeaders.AUTHORIZATION) String authToken,
            @RequestHeader(SSN) String ssn,
            @RequestParam String paymentId, @RequestParam String paperId
    ) {
        najiService.setInquiryStatus(ssn, paymentId, paperId);
        return new ResponseEntity<>(HttpStatus.OK);

    }

//    /**
//     * Inquires a plateNo through simorg service
//     *
//     * @param authToken sent on HttpHeader by client
//     * @param userId    generated by gateway
//     * @param serialId  generated by gateway
//     * @param plateNo   sent as a param by client
//     * @return totalAmount of debt along with bill details (such as date, amount and billId) and enquiryId
//     */
//    @GetMapping(value = "/freewayTollsSummary")
//    public ResponseEntity<CarTollSummaryDto.Response> summary(
//            @RequestHeader(name = HttpHeaders.AUTHORIZATION) String authToken,
//            @RequestHeader(USER_ID) Long userId,
//            @RequestHeader(SERIAL_ID) String serialId,
//            @RequestParam Integer plateNo
//    ) {
//        CarTollSummaryDto.Response response = null;//najiServiceImpl.getSummary(userId, serialId, plateNo);
//
//        return new ResponseEntity<>(response, HttpStatus.OK);
//
//    }
//
//    /**
//     * <p>
//     * this method calls before the "finalPayFreewayToll" method to get "orderId" as input param for the final method
//     * and gets "Token" created by psp Shaparak URL if it's ready for client payment.
//     * also saves results of Shaparak page into ErrorLog and Transaction tables
//     *
//     * @param authToken sent on HttpHeader by client
//     * @param userId    generated by gateway
//     * @param request   a body includes plateNo, enquiryId and a list of bills info such as billId and amount
//     * @return
//     */
//    @PostMapping(value = "/payFreewayTollByCard")
//    public ResponseEntity<CarTollPaymentDto.Response> payFreewayToll(
//            @RequestHeader(name = HttpHeaders.AUTHORIZATION) String authToken,
//            @RequestHeader(USER_ID) Long userId,
//            @Valid @RequestBody CarTollPaymentDto.Request request
//    ) throws ServiceUnavailableException {
//
//        CarTollPaymentDto.Response response = null;//najiServiceImpl.PayRequestFreewayTollByCard(request, userId);
//
//        return new ResponseEntity<>(response, HttpStatus.OK);
//
//    }
//
//    /**
//     * <p>
//     * finds Transaction By "OrderId" and then verifies the psp's Token by Shaparak verify URL(Actually
//     * for recognizing the Token has a payment or not and not to be call more than 15min after paymentRequest).
//     * Then saves verify response into Transaction and ErrorLog tables.
//     * if the response code of verifying is 0, then "PayFreewayToll(s)" service of Simorq is called to apply the payments belonging to a plateNo.
//     * then its responses receive and save.
//     *
//     * @param authToken
//     * @param userId
//     * @param serialId
//     * @param request   includes orderId
//     * @return
//     */
//    @PutMapping(value = "/payFreewayTollByCard")
//    public ResponseEntity<CarTollFinalPaymentDto.Response> finalPayFreewayToll(
//            @RequestHeader(name = HttpHeaders.AUTHORIZATION) String authToken,
//            @RequestHeader(USER_ID) Long userId,
//            @RequestHeader(SERIAL_ID) String serialId,
//            @Valid @RequestBody CarTollFinalPaymentDto.Request request
//    ) throws ServiceUnavailableException {
//
//        CarTollFinalPaymentDto.Response response = null;//najiServiceImpl.finalPayFreewayTollByCard(request, serialId);
//
//        return new ResponseEntity<>(response, HttpStatus.OK);
//
//    }
//
//    /**
//     * <p>
//     * pays totalAmount of bills by calling "trustedPayment" method through neoWallet URL and gets the response.
//     * If the response is success which means the payment was successful, calls "PayFreewayToll(s)" service of Simorq to apply the payments belonging to a plateNo.
//     *
//     * @param request
//     * @return
//     * @throws JsonProcessingException
//     */
//    @PostMapping(value = "/payFreewayTollByWallet")
//    public ResponseEntity<CarTollWalletPaymentDto.Response> payWithWallet(
//            @RequestHeader(name = HttpHeaders.AUTHORIZATION) String authToken,
//            @RequestHeader(USER_ID) Long userId,
//            @RequestHeader(SERIAL_ID) String serialId,
//            @RequestHeader(CELL_PHONE) String cellphone,
//            @RequestHeader(SSN) String ssn,
//            @Valid @RequestBody CarTollWalletPaymentDto.Request request
//    ) throws JsonProcessingException {
//
//        CarTollWalletPaymentDto.Response response = null;/*najiService.payFreewayTollByWallet(request,
//                serialId,
//                userId,
//                cellphone,
//                ssn,
//                authToken);*/
//
//        return new ResponseEntity<>(response, HttpStatus.OK);
//
//    }
}
